#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "vetor.h"
#include "carta.h"
#include "memo.h"
const int TAM=52;
int i;
struct vetor {
	carta* baralho;
	int n, aux; 
};
vetor_t* vetor_cria(void)
{
	int i;
	struct vetor *vet = (struct vetor*)memo_aloca(sizeof(struct vetor));
	vet->n = 0;
	vet->baralho = (carta*) memo_aloca(TAM*sizeof(carta));
	for(i=0; i<=TAM; i++){
	vet->baralho[i]==NULL;
		}
	return vet;
	}
void vetor_destroi(vetor_t* vet)
{
	memo_libera(vet->baralho);
	memo_libera(vet);
}
int vetor_numelem(vetor_t *vet)
{ 	int i;
	while(vet->baralho[i]==NULL){
	vet->n++;
	i++;
	}
	return vet->n;
}
void vetor_insere_carta(vetor_t *vet, int indice, carta c)
{	int i = (vet->n);
	int j;
	if((vet->n+1)%TAM==0 && vet->aux!=-1){
		vet->baralho = (carta*) memo_realoca(vet->baralho,(vet->n+10)*sizeof(carta));
		for(j=vet->n;j<vet->n+TAM;j++){
			vet->baralho[j]=NULL;
			}
		}
	while(i>indice){
		vet->baralho[i] = vet->baralho[i-1];
		i--;
	}
	vet->baralho[indice] = c;
	vet->n++;
}

carta vetor_remove_carta(vetor_t *vet, int indice)
{
	int i;
	carta c;
	c = vet->baralho[indice];
	for(i=indice; i<vet->n-1; i++){
		vet->baralho[i]=vet->baralho[i+1];
	}
	vet->n--;
	vet->baralho[vet->n]=NULL;
	return c;
}

carta vetor_acessa_carta(vetor_t *vet, int indice)
{
	return vet->baralho[indice];
}

bool vetor_valido(vetor_t *vet)
	{ if(vet==NULL){
		return false;
	}else{
		return true;
	}
}
